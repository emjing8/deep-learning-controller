from models.model import Model
from tensorflow.keras import Sequential, layers, models
from tensorflow.keras.layers.experimental.preprocessing import Rescaling
from tensorflow.keras.optimizers import RMSprop, Adam
import numpy as np 

class RandomModel(Model):
    def _define_model(self, input_shape, categories_count):
        # Your code goes here
        # you have to initialize self.model to a keras model
        # very similar to transfered_model.py, the only difference is that you should randomize the weights
        # load your basic model with keras's load_model function
        # freeze the weights of the loaded model to make sure the training doesn't affect them
        # (check the number of total params, trainable params and non-trainable params in your summary generated by train_transfer.py)
        # randomize the weights of the loaded model, possibly by using _randomize_layers
        # use this model by removing the last layer, adding dense layers and an output layer
        base_model = models.load_model("basic_model.keras")
        
        # Check model params
        base_model.summary()
        
        # Freeze weights
        for layer in base_model.layers:
            layer.trainable = False
            
        # Randomize weights
        self._randomize_layers(base_model)
        
        # Remove last layer and add new layers
        x = base_model.layers[-2].output
        x = layers.Dense(128, activation='relu')(x)
        x = layers.Dense(categories_count, activation='softmax')(x)
        
        self.model = models.Model(inputs=base_model.input, outputs=x)
    
    
    def _compile_model(self):
        # Your code goes here
        # you have to compile the keras model, similar to the example in the writeup
        self.model.compile(
            optimizer=RMSprop(learning_rate=0.001),
            loss='categorical_crossentropy',
            metrics=['accuracy'],
        )

    @staticmethod
    def _randomize_layers(model):
        # Your code goes here

        # you can write a function here to set the weights to a random value
        # use this function in _define_model to randomize the weights of your loaded model
        for layer in model.layers:
            if hasattr(layer, 'kernel'):
                # Find the shape of current weights
                weights = layer.get_weights()
                new_weights = []
                
                for w in weights:
                    # Generate random weights
                    new_w = np.random.normal(0, 0.02, w.shape)
                    new_weights.append(new_w)
                    
                # Set new random weights
                layer.set_weights(new_weights)
